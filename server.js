const express = require('express');
const session = require('express-session');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

/* ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–£–¢–ï–ô ==================== */
const UPLOAD_DIR = path.join(__dirname, 'public', 'uploads');
const UPLOAD_DIR2 = path.join(__dirname, 'uploads2');
const GALLERY_JSON = path.join(__dirname, 'data', 'gallery.json');
const MATERIALS_JSON = path.join(__dirname, 'data', 'materials.json');
const CONFIG_PATH = path.join(__dirname, 'config.json');
const CONFIRMATION_KEY = '791f136fdc926e810edd1b6643a9f3cb3029c9af726fbeed657a7fc9714168db';

/* ==================== –ù–ê–°–¢–†–û–ô–ö–ê MULTER ==================== */
const galleryStorage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, UPLOAD_DIR),
  filename: (req, file, cb) => cb(null, `${Date.now()}${path.extname(file.originalname)}`)
});

const mainStorage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, UPLOAD_DIR2),
  filename: (req, file, cb) => cb(null, `${Date.now()}-${file.originalname}`)
});

const uploadGallery = multer({ storage: galleryStorage });
const uploadMaterial = multer({ storage: galleryStorage });
const uploadMain = multer({ storage: mainStorage });

/* ==================== –°–ï–†–í–ï–†–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================== */
function readConfig() {
  if (fs.existsSync(CONFIG_PATH)) {
    return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
  }
  // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
  return {
    sitename: '',
    description: '',
    slogan: '',
    image: '',
    password: 'admin123'
  };
}

function writeConfig(cfg) {
  fs.writeFileSync(CONFIG_PATH, JSON.stringify(cfg, null, 2), 'utf8');
}

// –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥, –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å
const initialConfig = readConfig();
let CORRECT_PASSWORD = initialConfig.password || 'admin123';


// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
[UPLOAD_DIR, UPLOAD_DIR2].forEach(dir => {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
});

/* ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================== */
function readJSON(file) {
  return JSON.parse(fs.readFileSync(file, 'utf8'));
}

function writeJSON(file, data) {
  fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

function readConfig() {
  if (fs.existsSync(CONFIG_PATH)) {
    return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
  }
  return {
    sitename: '',
    description: '',
    slogan: '',
    image: ''
  };
}

function writeConfig(cfg) {
  fs.writeFileSync(CONFIG_PATH, JSON.stringify(cfg, null, 2), 'utf8');
}

/* ==================== MIDDLEWARE ==================== */
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(session({
  secret: 'YOUR_SECRET_KEY',
  resave: false,
  saveUninitialized: true
}));

// –ó–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–∫–∏
app.use((req, res, next) => {
  if (req.path === '/admin.html' && !req.session.auth) {
    return res.redirect('/login.html');
  }
  next();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads2', express.static(UPLOAD_DIR2));

/* ==================== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ==================== */
app.post('/login', (req, res) => {
  const { password } = req.body;
  if (password === CORRECT_PASSWORD) {
    req.session.auth = true;
    return res.json({ success: true, message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' });
  }
  setTimeout(() => {
    res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.' });
  }, 1500);
});

app.post('/change-password', (req, res) => {
  const { oldPass, newPass, passKey } = req.body;
  if (!req.session.auth) {
    return res.status(401).json({ success: false, message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã' });
  }
  if (passKey !== CONFIRMATION_KEY) {
    return res.status(403).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
  }
  if (oldPass !== CORRECT_PASSWORD) {
    return res.status(400).json({ success: false, message: '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ' });
  }

  // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  CORRECT_PASSWORD = newPass;

  // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ config.json
  const cfg = readConfig();
  cfg.password = newPass;
  writeConfig(cfg);

  return res.json({ success: true, message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!' });
});


app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) console.error('Session destroy error:', err);
    res.redirect('/login.html');
  });
});

/* ==================== –ì–ê–õ–ï–†–ï–Ø ==================== */
app.get('/gallery', (req, res) => {
  const items = readJSON(GALLERY_JSON);
  res.json(items);
});

app.post('/upload', uploadGallery.single('image'), (req, res) => {
  const gallery = readJSON(GALLERY_JSON);
  gallery.push({
    filename: req.file.filename,
    title: req.body.title || '',
    date: new Date().toISOString()
  });
  writeJSON(GALLERY_JSON, gallery);
  res.json({ success: true });
});

app.post('/delete', (req, res) => {
  let gallery = readJSON(GALLERY_JSON).filter(i => i.filename !== req.body.filename);
  writeJSON(GALLERY_JSON, gallery);
  fs.unlink(path.join(UPLOAD_DIR, req.body.filename), () => res.json({ success: true }));
});

/* ==================== –ú–ê–¢–ï–†–ò–ê–õ–´ ==================== */
app.get('/materials', (req, res) => {
  const materials = readJSON(MATERIALS_JSON);
  materials.sort((a, b) => new Date(b.date) - new Date(a.date));
  res.json(materials);
});

app.post('/materials', uploadMaterial.single('image'), (req, res) => {
  const materials = readJSON(MATERIALS_JSON);
  materials.push({
    id: Date.now(),
    title: req.body.title || '',
    content: req.body.content || '',
    image: req.file ? req.file.filename : '',
    date: new Date().toISOString(),
    status: 'published'
  });
  writeJSON(MATERIALS_JSON, materials);
  res.json({ success: true });
});

app.post('/materials/delete', (req, res) => {
  let materials = readJSON(MATERIALS_JSON).filter(m => m.id != req.body.id);
  writeJSON(MATERIALS_JSON, materials);
  if (req.body.image) fs.unlink(path.join(UPLOAD_DIR, req.body.image), () => {});
  res.json({ success: true });
});

/* ==================== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ==================== */
app.get('/main', (req, res) => {
  const cfg = readConfig();
  res.json([cfg]);
});

app.post('/main', uploadMain.single('image'), (req, res) => {
  const { sitename, description, slogan, currentImage } = req.body;
  const cfg = {
    sitename,
    description,
    slogan,
    image: req.file ? '/uploads2/' + req.file.filename : currentImage
  };

  writeConfig(cfg);
  res.json({ message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
});

app.post('/admin/save-settings', uploadMain.single('image'), (req, res) => {
  try {
    const { sitename, description, slogan, currentImage } = req.body;
    const uploadedImage = req.file;

    const config = {
      sitename,
      description,
      slogan,
      image: uploadedImage ? '/uploads2/' + uploadedImage.filename : currentImage
    };

    writeConfig(config);
    res.json({ success: true }); // alert –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', err);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


// –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
const fsPromises = require('fs/promises');

async function cleanupUploadsDir() {
  try {
    // —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç
    await fsPromises.mkdir(UPLOAD_DIR2, { recursive: true });

    // —á–∏—Ç–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const files = await fsPromises.readdir(UPLOAD_DIR2);
    if (files.length <= 1) return; // –Ω–µ—á–µ–≥–æ —á–∏—Å—Ç–∏—Ç—å

    // –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
    const stats = await Promise.all(files.map(async file => {
      const filepath = path.join(UPLOAD_DIR2, file);
      const stat     = await fsPromises.stat(filepath);
      return { file, mtime: stat.mtime };
    }));

    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å—Ç–∞—Ä—ã–µ ‚Äî –≤ –Ω–∞—á–∞–ª–æ
    stats.sort((a, b) => a.mtime - b.mtime);

    // —É–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –º–∞—Å—Å–∏–≤–µ)
    const toDelete = stats.slice(0, stats.length - 1);
    await Promise.all(toDelete.map(({ file }) =>
      fsPromises.unlink(path.join(UPLOAD_DIR2, file))
    ));

    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–∞(–æ–≤), –æ—Å—Ç–∞–≤–ª–µ–Ω: ${stats[stats.length - 1].file}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ uploads2:', err);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
cleanupUploadsDir();

// –ê —Ç–µ–ø–µ—Ä—å ‚Äî –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (24‚ÄØ—á * 60‚ÄØ–º–∏–Ω * 60‚ÄØ—Å–µ–∫ * 1000‚ÄØ–º—Å)
setInterval(cleanupUploadsDir, 24 * 60 * 60 * 1000);

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');


// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram
const BOT_TOKEN = process.env.BOT_TOKEN || '8090008947:AAGoI1DrVdHEhawbvQzbmcKu0tx30Ky14BU';
const GROUP_ID  = process.env.GROUP_ID  || '-1002564808736';
const bot = new TelegramBot(BOT_TOKEN);

// –°—Ç–∞—Ç–∏–∫–∞
app.use(express.static(path.join(__dirname, 'public')));

// –ü–∞—Ä—Å–µ—Ä JSON (–í–ê–ñ–ù–û ‚Äî –¥–æ —Ä–æ—É—Ç–æ–≤)
app.use(express.json());

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
app.post('/request', async (req, res) => {
  const { phone, email, message } = req.body;
  if (!phone || !email || !message) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
  const msg = 
    `üì® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
    `‚úâÔ∏è Email: ${email}\n\n` +
    `üí¨ ${message}`;
  await bot.sendMessage(GROUP_ID, msg, { parse_mode: 'Markdown' });
  res.json({ success: true });
});





/* ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==================== */
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${PORT} üî•`));